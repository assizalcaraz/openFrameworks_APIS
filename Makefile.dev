# Makefile de desarrollo para Pokemon API - openFrameworks
# Atajos √∫tiles para desarrollo y compilaci√≥n

.PHONY: help build run clean install-addons setup check-env debug release install-deps status test install package dev

# Variables
APP_NAME = of_apis_project2
BUILD_DIR = bin
ADDONS_DIR = addons
REQUIRED_ADDONS = ofxJSON ofxHTTP ofxNetworkUtils ofxHTTPForm

# Colores para output
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Verificar que OF_ROOT est√© definido
ifndef OF_ROOT
	OF_ROOT = /Users/joseassizalcarazbaxter/Documents/UNA/POSGRADO/2025_1/PyA/of_v0.12.1_osx_release
endif

help: ## Mostrar esta ayuda
	@echo "$(GREEN)Pokemon API - openFrameworks Makefile$(NC)"
	@echo "=========================================="
	@echo ""
	@echo "$(YELLOW)Comandos disponibles:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(BLUE)Configuraci√≥n actual:$(NC)"
	@echo "  OF_ROOT: $(OF_ROOT)"
	@echo "  APP_NAME: $(APP_NAME)"
	@echo "  BUILD_DIR: $(BUILD_DIR)"

check-env: ## Verificar entorno de desarrollo
	@echo "$(YELLOW)üîç Verificando entorno de desarrollo...$(NC)"
	@if [ -z "$(OF_ROOT)" ]; then \
		echo "$(RED)‚ùå OF_ROOT no est√° definido$(NC)"; \
		echo "Por favor define OF_ROOT en config.make o como variable de entorno"; \
		exit 1; \
	fi
	@if [ ! -d "$(OF_ROOT)" ]; then \
		echo "$(RED)‚ùå OF_ROOT no existe: $(OF_ROOT)$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ OF_ROOT encontrado: $(OF_ROOT)$(NC)"
	@if [ ! -f "$(OF_ROOT)/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk" ]; then \
		echo "$(RED)‚ùå openFrameworks no est√° instalado correctamente$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ openFrameworks instalado correctamente$(NC)"

install-deps: ## Instalar dependencias del sistema
	@echo "$(YELLOW)üì¶ Instalando dependencias del sistema...$(NC)"
	@if command -v brew >/dev/null 2>&1; then \
		echo "Instalando dependencias con Homebrew..."; \
		brew install git cmake; \
	else \
		echo "Por favor instala Git y CMake manualmente"; \
	fi
	@echo "$(GREEN)‚úÖ Dependencias instaladas$(NC)"

install-addons: ## Instalar addons necesarios
	@echo "$(YELLOW)üîå Instalando addons necesarios...$(NC)"
	@mkdir -p $(ADDONS_DIR)
	@for addon in $(REQUIRED_ADDONS); do \
		if [ ! -d "$(ADDONS_DIR)/$$addon" ]; then \
			echo "Instalando $$addon..."; \
			case $$addon in \
				"ofxJSON") \
					git clone https://github.com/jeffcrouse/ofxJSON.git $(ADDONS_DIR)/$$addon || true; \
					;; \
				"ofxHTTP") \
					git clone https://github.com/jeffcrouse/ofxHTTP.git $(ADDONS_DIR)/$$addon || true; \
					;; \
				"ofxNetworkUtils") \
					git clone https://github.com/jeffcrouse/ofxNetworkUtils.git $(ADDONS_DIR)/$$addon || true; \
					;; \
				"ofxHTTPForm") \
					git clone https://github.com/jeffcrouse/ofxHTTPForm.git $(ADDONS_DIR)/$$addon || true; \
					;; \
			esac; \
		else \
			echo "$(GREEN)‚úÖ $$addon ya est√° instalado$(NC)"; \
		fi; \
	done
	@echo "$(GREEN)‚úÖ Addons instalados$(NC)"

setup: check-env install-deps install-addons ## Configurar entorno completo
	@echo "$(GREEN)‚úÖ Entorno configurado completamente$(NC)"
	@echo "$(YELLOW)üí° Ejecuta 'make -f Makefile.dev build' para compilar la aplicaci√≥n$(NC)"

build: check-env ## Compilar la aplicaci√≥n
	@echo "$(YELLOW)üî® Compilando $(APP_NAME)...$(NC)"
	@make -f $(OF_ROOT)/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk
	@if [ $$? -eq 0 ]; then \
		echo "$(GREEN)‚úÖ Compilaci√≥n exitosa$(NC)"; \
		echo "$(YELLOW)üí° Ejecuta 'make -f Makefile.dev run' para ejecutar la aplicaci√≥n$(NC)"; \
	else \
		echo "$(RED)‚ùå Error en la compilaci√≥n$(NC)"; \
		exit 1; \
	fi

run: build ## Ejecutar la aplicaci√≥n
	@echo "$(YELLOW)üöÄ Ejecutando $(APP_NAME)...$(NC)"
	@if [ -f "$(BUILD_DIR)/$(APP_NAME).app/Contents/MacOS/$(APP_NAME)" ]; then \
		open $(BUILD_DIR)/$(APP_NAME).app; \
	elif [ -f "$(BUILD_DIR)/$(APP_NAME)" ]; then \
		./$(BUILD_DIR)/$(APP_NAME); \
	else \
		echo "$(RED)‚ùå Aplicaci√≥n no encontrada. Ejecuta 'make -f Makefile.dev build' primero$(NC)"; \
		exit 1; \
	fi

debug: check-env ## Compilar en modo debug
	@echo "$(YELLOW)üêõ Compilando en modo debug...$(NC)"
	@make -f $(OF_ROOT)/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk Debug
	@echo "$(GREEN)‚úÖ Compilaci√≥n debug completada$(NC)"

release: check-env ## Compilar en modo release
	@echo "$(YELLOW)üöÄ Compilando en modo release...$(NC)"
	@make -f $(OF_ROOT)/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk Release
	@echo "$(GREEN)‚úÖ Compilaci√≥n release completada$(NC)"

clean: ## Limpiar archivos de compilaci√≥n
	@echo "$(YELLOW)üßπ Limpiando archivos de compilaci√≥n...$(NC)"
	@make -f $(OF_ROOT)/libs/openFrameworksCompiled/project/makefileCommon/compile.project.mk clean
	@rm -rf $(BUILD_DIR)/obj
	@echo "$(GREEN)‚úÖ Limpieza completada$(NC)"

clean-all: clean ## Limpiar todo (incluyendo addons)
	@echo "$(YELLOW)üóëÔ∏è Limpiando todo...$(NC)"
	@rm -rf $(ADDONS_DIR)
	@rm -rf $(BUILD_DIR)
	@echo "$(GREEN)‚úÖ Limpieza completa$(NC)"

status: ## Mostrar estado del proyecto
	@echo "$(GREEN)üìä Estado del proyecto $(APP_NAME)$(NC)"
	@echo "================================"
	@echo "$(YELLOW)üîß openFrameworks:$(NC) $(if $(wildcard $(OF_ROOT)),‚úÖ $(OF_ROOT),‚ùå No encontrado)"
	@echo "$(YELLOW)üìÅ Addons:$(NC)"
	@for addon in $(REQUIRED_ADDONS); do \
		if [ -d "$(ADDONS_DIR)/$$addon" ]; then \
			echo "  ‚úÖ $$addon"; \
		else \
			echo "  ‚ùå $$addon"; \
		fi; \
	done
	@echo "$(YELLOW)üî® Build:$(NC) $(if $(wildcard $(BUILD_DIR)/$(APP_NAME).app) $(wildcard $(BUILD_DIR)/$(APP_NAME)),‚úÖ Compilado,‚ùå No compilado)"
	@echo "$(YELLOW)üìÅ Archivos fuente:$(NC) $(shell find src -name "*.cpp" -o -name "*.h" | wc -l) archivos"

test: build ## Ejecutar tests (si est√°n disponibles)
	@echo "$(YELLOW)üß™ Ejecutando tests...$(NC)"
	@if [ -f "tests/run_tests.sh" ]; then \
		./tests/run_tests.sh; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è No hay tests configurados$(NC)"; \
	fi

install: build ## Instalar la aplicaci√≥n
	@echo "$(YELLOW)üì¶ Instalando $(APP_NAME)...$(NC)"
	@if [ -f "$(BUILD_DIR)/$(APP_NAME).app" ]; then \
		cp -r $(BUILD_DIR)/$(APP_NAME).app /Applications/; \
		echo "$(GREEN)‚úÖ Aplicaci√≥n instalada en /Applications/$(NC)"; \
	else \
		echo "$(RED)‚ùå Aplicaci√≥n no encontrada. Ejecuta 'make -f Makefile.dev build' primero$(NC)"; \
		exit 1; \
	fi

package: release ## Crear paquete de distribuci√≥n
	@echo "$(YELLOW)üì¶ Creando paquete de distribuci√≥n...$(NC)"
	@mkdir -p dist
	@if [ -f "$(BUILD_DIR)/$(APP_NAME).app" ]; then \
		cp -r $(BUILD_DIR)/$(APP_NAME).app dist/; \
		cp README.md dist/; \
		cp LICENSE dist/ 2>/dev/null || true; \
		cd dist && zip -r $(APP_NAME).zip $(APP_NAME).app README.md LICENSE 2>/dev/null || zip -r $(APP_NAME).zip $(APP_NAME).app README.md; \
		echo "$(GREEN)‚úÖ Paquete creado: dist/$(APP_NAME).zip$(NC)"; \
	else \
		echo "$(RED)‚ùå Aplicaci√≥n no encontrada. Ejecuta 'make -f Makefile.dev build' primero$(NC)"; \
		exit 1; \
	fi

dev: setup build run ## Configurar, compilar y ejecutar (desarrollo completo)
	@echo "$(GREEN)‚úÖ Desarrollo completo finalizado$(NC)"

# Comando por defecto
.DEFAULT_GOAL := help
